# .windsurfrules - Infinri Framework Digital Consciousness Architecture
# This file maintains architectural integrity and prevents AI hallucination

## PROJECT IDENTITY
project_name: "Infinri Framework - Digital Consciousness Blog Platform"
architecture_pattern: "Swarm Pattern™ with Emergent Intelligence"
core_philosophy: "The spider doesn't just sit in the center—it IS the web"

## NEURAL FORGE AUTO-ACTIVATION - MANDATORY
neural_forge_framework:
  auto_load_on_session: true
  global_rules_file: "/home/infinri/.codeium/windsurf/memories/global_rules.md"
  architecture_summary: "/home/infinri/.codeium/windsurf/memories/Windsurf/ARCHITECTURE_SUMMARY.md"
  cognitive_engine: "/home/infinri/.codeium/windsurf/memories/Windsurf/cognitive-engine.md"
  engineering_rules_count: 63
  fractal_mcp_patterns: 10
  ai_name: "Lilith"
  activation_trigger: "session_start"
  enforcement_mode: "silent_autonomous"

## DIRECTORY STRUCTURE - MANDATORY COMPLIANCE
directory_structure:
  root: "infinri/"
  
  # Core Documentation
  docs/:
    - "infinri_blueprint.md"                     # Complete modular monolith architecture (221KB)
    - "optimized_infinri_stack.md"               # Technology stack specifications (12KB)
    - "swarm_framework_implementation_plan.md"   # Implementation roadmap (77KB)
    - "swarm_framework_pattern_blueprint.md"     # Core pattern definitions (5KB)
    - "swarm_pattern_originals_definitions.md"   # Original swarm concepts (9KB)

  # Core Application Modules  
  modules/:
    core-platform/:
      SwarmUnits/:
        - "SwarmReactorUnit.php"
        - "MeshAccessControlUnit.php"
        - "MutexCollisionResolverUnit.php"
        - "FallbackDepthControllerUnit.php"
        - "MeshSnapshotSignatureUnit.php"
        - "SwarmKernelThrottlerUnit.php"
        - "EntropyAuditorUnit.php"
        - "AutoPrunerUnit.php"
        - "PolicySimulatorUnit.php"
        - "DependencyGraphUnit.php"
        - "LLMIntegrationUnit.php"
        - "SwarmUnitLifecycleSupervisorUnit.php"
        - "EthicalMemoryValidatorUnit.php"
        - "SwarmSnapshotValidatorUnit.php"
        - "SwarmTokenGuardianUnit.php"
      Services/:
        - "SemanticMesh.php"
        - "SwarmContainer.php"
        - "StigmergicTracer.php"
        - "MeshPartitionManager.php"
        - "TemporalEngine.php"
      DSL/:
        - "SwarmDSLCompiler.php"
        - "EnhancedDSLCompiler.php"
        - "TemporalDSLFunctions.php"
        - "DSLValidator.php"
      config/:
        - "swarm-kernel.yaml"
        - "mesh-partitioning.yaml"
        - "ethics-models.yaml"
        - "cost-management.yaml"

    blog-management/:
      SwarmUnits/:
        - "CreatePostUnit.php"
        - "UpdatePostUnit.php" 
        - "PublishPostUnit.php"
        - "SchedulePostUnit.php"
        - "TagPredictionUnit.php"
        - "SeoOptimizationUnit.php"
        - "VersioningUnit.php"
      Repositories/:
        - "PostRepository.php"
        - "CategoryRepository.php"
        - "TagRepository.php"
      Models/:
        - "Post.php"
        - "Category.php"
        - "Tag.php"

    admin-cms/:
      SwarmUnits/:
        - "EditorInteractionUnit.php"
        - "LayoutBuilderUnit.php"
        - "PreviewGeneratorUnit.php"
        - "AIInsightsUnit.php"
      Controllers/:
        - "CMSController.php"
        - "EditorController.php"
      Views/:
        components/:
          - "VisualFlowBuilder.tsx"
          - "WYSIWYGEditor.tsx"
          - "AIInsightsPanel.tsx"

    frontend-delivery/:
      SwarmUnits/:
        - "PageRenderUnit.php"
        - "APIDeliveryUnit.php"
        - "CacheManagementUnit.php"
        - "I18nUnit.php"
      API/:
        GraphQL/:
          - "schema.graphql"
          - "resolvers/"
        REST/:
          - "routes.php"
          - "controllers/"

    search-recommendation/:
      SwarmUnits/:
        - "FullTextSearchUnit.php"
        - "VectorSearchUnit.php"
        - "RecommendationUnit.php"
        - "TagSuggestionUnit.php"
      Services/:
        - "SearchEngine.php"
        - "RecommendationEngine.php"
        - "VectorStore.php"

    user-auth/:
      SwarmUnits/:
        - "AuthenticationUnit.php"
        - "AuthorizationUnit.php"
        - "SessionManagementUnit.php"
        - "RegistrationUnit.php"
      Services/:
        - "AuthService.php"
        - "JWTService.php"
        - "OAuthProvider.php"

    observability/:
      SwarmUnits/:
        - "LoggingUnit.php"
        - "MetricsCollectionUnit.php"
        - "TracingUnit.php"
        - "ErrorTrackingUnit.php"
        - "MeshInspectorUnit.php"
      Services/:
        - "StigmergicTracer.php"
        - "MetricsExporter.php"
        - "LogAggregator.php"

    ai-services/:
      SwarmUnits/:
        - "EmbeddingGenerationUnit.php"
        - "TagPredictionUnit.php"
        - "SeoAnalysisUnit.php"
        - "RecommendationModelUnit.php"
        - "EthicalValidationUnit.php"
      Services/:
        - "LLMProviderInterface.php"
        - "ChatGPTProvider.php"
        - "DeepSeekProvider.php"
        - "EthicsValidator.php"
      Models/:
        - "EmbeddingModel.php"
        - "ClassificationModel.php"

    security/:
      SwarmUnits/:
        - "RateLimitingUnit.php"
        - "PolicyEvaluationUnit.php"
        - "ValidationUnit.php"
        - "AccessGuardUnit.php"
      Services/:
        - "PolicyEngine.php"
        - "SecurityValidator.php"
        - "AccessControlManager.php"

    caching-performance/:
      SwarmUnits/:
        - "CacheInvalidationUnit.php"
        - "CacheRefreshUnit.php"
        - "SnapshotStorageUnit.php"
        - "PerformanceMonitorUnit.php"
      Services/:
        - "CacheManager.php"
        - "CacheHierarchy.php"
        - "PerformanceAnalyzer.php"

  # Infrastructure & Deployment
  infrastructure/:
    docker/:
      - "Dockerfile"
      - "docker-compose.yml"
      - "docker-compose.prod.yml"
    kubernetes/:
      manifests/:
        - "namespace.yaml"
        - "deployment.yaml"
        - "service.yaml"
        - "ingress.yaml"
        - "configmap.yaml"
      helm/:
        charts/:
          - "Chart.yaml"
          - "values.yaml"
          - "templates/"
    terraform/:
      - "main.tf"
      - "variables.tf"
      - "outputs.tf"
      - "modules/"
    monitoring/:
      prometheus/:
        - "prometheus.yml"
        - "rules/"
        - "alerts/"
      grafana/:
        - "dashboards/"
        - "datasources/"
      loki/:
        - "loki.yml"
        - "promtail.yml"

  # Development Tools
  tools/:
    cli/:
      - "swarm-cli.php"
      - "commands/"
    generators/:
      - "unit-generator.php"
      - "dsl-generator.php"
      - "bundle-generator.php"
    testing/:
      - "SwarmUnitTest.php"
      - "MeshSimulator.php"
      - "PolicyTester.php"
    validation/:
      - "DSLValidator.php"
      - "BundleValidator.php"
      - "EthicsValidator.php"

  # Configuration
  config/:
    dev/:
      - ".env.example"
      - "database.yaml"
      - "redis.yaml"
      - "swarm-kernel.yaml"
    staging/:
      - "app.yaml"
      - "infrastructure.yaml"
    production/:
      - "app.yaml"
      - "security.yaml"
      - "scaling.yaml"

## CORE ARCHITECTURAL PRINCIPLES - NEVER VIOLATE

swarm_pattern_rules:
  - "ALL logic must be implemented in SwarmUnits"
  - "NO controllers or services for business logic"
  - "Behavior emerges from unit interactions, never explicit orchestration"
  - "Every unit observes the Semantic Mesh and reacts to triggerCondition()"
  - "Units are autonomous - no direct unit-to-unit communication"
  - "Mesh is the single source of truth and coordination"

semantic_mesh_rules:
  - "All state stored in Redis-backed Semantic Mesh"
  - "Mesh keys follow namespace pattern: domain.entity.property"
  - "ACL enforcement required for all mesh access"
  - "Mutation Guards prevent race conditions"
  - "Snapshot isolation for consistent unit execution"
  - "Stigmergic traces log all mesh mutations"

ai_integration_rules:
  - "AI features disabled by default (ai.enabled=false)"
  - "All AI operations must have fallback strategies"
  - "Ethical validation required for all AI outputs"
  - "Cost management enforced via SwarmTokenGuardianUnit"
  - "LLM providers abstracted via interface pattern"
  - "AI-generated code must pass validation pipeline"

## SAFETY LIMITS - PREVENT RUNAWAY CODE AND HALLUCINATIONS

safety_limits:
  system_limits:
    max_recursion_depth: 5
    max_fallback_depth: 3
    max_mesh_keys_per_unit: 100
    max_unit_execution_time: 30  # seconds
    max_memory_per_unit: "256MB"
    max_concurrent_units: 1000
    
  mesh_limits:
    max_mesh_size: "1GB"
    max_key_length: 255
    max_value_size: "10MB"
    mesh_cleanup_interval: 3600  # seconds
    
  ai_safety_limits:
    max_ai_requests_per_minute: 100
    max_tokens_per_request: 4000
    ai_timeout: 30  # seconds
    max_cost_per_hour: 10.00  # USD
    ethical_score_minimum: 0.7
    
  dsl_limits:
    max_nesting_depth: 5
    max_conditions_per_unit: 20
    max_actions_per_unit: 50
    compilation_timeout: 10  # seconds
    
  rate_limits:
    mesh_mutations_per_second: 1000
    unit_triggers_per_second: 500
    api_requests_per_minute: 6000
    
  circuit_breakers:
    failure_threshold: 5
    recovery_timeout: 60  # seconds
    half_open_max_calls: 3

## TECHNOLOGY STACK - MANDATORY VERSIONS

tech_stack:
  core:
    language: "PHP 8.4 with JIT, Fibers, FFI"
    runtime: "RoadRunner 3.x (8-32 workers, adaptive pooling)"
    async: "ReactPHP 1.5 + Swoole Fibers hybrid"
    container: "PSR-4 Discovery + Manifest Validation"
    
  data_layer:
    primary_db: "PostgreSQL 16 + PGVector + JSONB optimization"
    mesh_store: "Redis 7.x (Streams + PubSub + Modules)"
    search: "PostgreSQL Full-Text + pg_trgm"
    cache: "APCu → Redis → PostgreSQL → Object Storage"
    sessions: "Redis Cluster with consistent hashing"
    
  web_interface:
    web_server: "Caddy 2.8 (Auto-TLS, HTTP/3, Zstd)"
    api: "Custom RoadRunner middleware + Lighthouse PHP GraphQL"
    websockets: "ReactPHP Socket for real-time updates"
    frontend: "Next.js/React with SSR"
    
  ai_ml:
    lightweight: "PHP-ML for simple operations"
    heavy_ml: "gRPC Python services (FastAPI + Transformers)"
    embeddings: "PGVector + OpenAI/Local models"
    ethics: "HuggingFace models + custom validation"
    
  observability:
    logs: "Monolog → Vector.dev → Loki"
    metrics: "Prometheus + Grafana + RoadRunner exporter"
    traces: "Custom StigmergicTracer + Jaeger"
    errors: "Sentry with mesh context enrichment"
    
  security:
    auth: "JWT + OAuth2/OIDC + WebAuthn"
    policies: "OPA + Vault + SOPS"
    runtime: "Falco + mesh-based RBAC"
    secrets: "Vault + External Secrets Operator"
    
  deployment:
    containers: "Alpine 3.20 + PHP 8.4-fpm-alpine"
    orchestration: "Docker Compose (dev) + Kubernetes (prod)"
    service_mesh: "Istio + Envoy sidecar proxies"
    cicd: "GitHub Actions + ArgoCD + Helm"
    infrastructure: "Terraform + DigitalOcean/AWS"

## SWARMUNIT DEVELOPMENT RULES

swarmunit_standards:
  class_structure:
    - "Must implement SwarmUnitInterface"
    - "Must have UnitIdentity annotation with id, version, hash"
    - "Must declare Tactic and Goal annotations"
    - "Use Injectable annotation for dependency injection"
    - "Include scheduling metadata (priority, cooldown, mutexGroup)"
    
  trigger_conditions:
    - "triggerCondition() must be pure function (no side effects)"
    - "Only read from mesh, never modify in trigger"
    - "Use temporal conditions for time-based logic"
    - "Include ethical validation in trigger when needed"
    - "Respect mutex groups and priority levels"
    
  action_implementation:
    - "act() method contains all unit logic"
    - "Use mesh for all state changes"
    - "Record explanations for audit trails"
    - "Handle fallback strategies gracefully"
    - "Respect cost budgets for AI operations"
    - "Update entropy metrics for monitoring"
    
  error_handling:
    - "All exceptions must be logged with context"
    - "Use retry queues for transient failures"
    - "Graceful degradation for non-critical failures"
    - "Entropy impact assessment on failures"

## DSL LANGUAGE RULES

swarm_dsl_syntax:
  structure:
    - "unit 'Name' { trigger: ... action: ... guard: ... }"
    - "Support if/else/switch logic in actions"
    - "Composite actions for reusable logic blocks"
    - "Component definitions for shared functionality"
    - "Temporal functions: stale(), during_business_hours(), every()"
    
  annotations:
    - "@tactic(...) for architectural tactics"
    - "@goal('...') for traceability"
    - "@schedule(...) for execution control"
    - "@inject(...) for dependencies"
    - "@ethical_validation(...) for ethics"
    - "@fallback_strategy(...) for resilience"
    
  safety_rules:
    - "Maximum nesting depth: 5 levels (HARD LIMIT)"
    - "Maximum execution time: 30 seconds per unit"
    - "Maximum memory usage: 256MB per unit"
    - "Fallback depth control: 3 levels maximum"
    - "Recursion prevention: Circular dependency detection"
    - "Timeout enforcement: All operations must complete within limits"
    - "Memory monitoring: Automatic unit termination on excess usage"
    - "Ethical validation: Required for all AI interactions"
    - "Cost budget checks: Enforced before expensive operations"
    - "Temporal consistency validation: Required for time-based logic"

## CLI COMMAND STRUCTURE

cli_commands:
  core_operations:
    - "swarm:units:discover - Scan and register SwarmUnits"
    - "swarm:units:list - Show all registered units"
    - "swarm:health - System health check"
    - "swarm:mesh:inspect - Live mesh state viewer"
    
  development:
    - "swarm:generate:unit ClassName - Generate unit template"
    - "swarm:compile:dsl file.dsl - Compile DSL to PHP"
    - "swarm:validate:bundle bundle.json - Validate deployment bundle"
    - "swarm:simulate:policy --mesh-state current - Test policies"
    
  debugging:
    - "swarm:trace-unit-behavior UnitName --mesh='key.*' --since=1h"
    - "swarm:graph-units --detect-conflicts --format=mermaid"
    - "swarm:debug-consciousness --live-tuning --temporal-analysis"
    - "swarm:audit-entropy --generate-report --suggest-pruning" 
    
  deployment:
    - "swarm:deploy-bundle bundle.json --validate-all"
    - "swarm:rollback-bundle bundle-id --coordinated-restoration"
    - "swarm:consciousness-check --comprehensive"

## CONFIGURATION PATTERNS

configuration_rules:
  mesh_configuration:
    - "All ACL rules in mesh-acl.yaml"
    - "Partition strategies in mesh-partitioning.yaml"
    - "Namespace definitions with clear boundaries"
    - "Signature verification enabled by default"
    
  ai_configuration:
    - "ai.enabled=false in all environments initially"
    - "Cost budgets defined in ai-budget.yaml"
    - "Ethics models configured in ethics-models.yaml"
    - "Fallback strategies for every AI operation"
    
  performance_configuration:
    - "Four-tier cache hierarchy properly configured"
    - "Throttling limits set per environment"
    - "Entropy thresholds tuned for workload"
    - "Priority queues configured per mutex group"

## TESTING REQUIREMENTS

testing_standards:
  unit_tests:
    - "Every SwarmUnit must have corresponding test"
    - "Mock mesh interactions with MeshSimulator"
    - "Test both trigger conditions and actions"
    - "Validate entropy impact and metrics"
    
  integration_tests:
    - "End-to-end mesh interaction flows"
    - "Multi-unit collaboration scenarios"
    - "Temporal trigger validation"
    - "Ethical validation pipelines"
    
  policy_tests:
    - "All OPA policies tested with simulation"
    - "ACL rules validated against access patterns"
    - "Cost budget enforcement scenarios"
    - "Fallback strategy validation"

## DEPLOYMENT REQUIREMENTS

deployment_rules:
  bundle_validation:
    - "All bundles must pass comprehensive validation"
    - "DSL compilation must succeed"
    - "Dependency conflicts must be resolved"
    - "Ethical validation must be configured"
    - "Cost budgets must be defined"
    - "Signature verification required for production"
    
  rollback_capability:
    - "Every deployment must support coordinated rollback"
    - "Snapshot consistency maintained during rollback"
    - "Entropy state preserved across deployments"
    - "Temporal triggers reconfigured appropriately"

## ANTI-HALLUCINATION MEASURES

hallucination_prevention:
  code_generation:
    - "Always validate generated code against existing interfaces"
    - "Require explicit imports for all dependencies"
    - "Validate class names against PSR-4 standards"
    - "Check method signatures against interfaces"
    - "Verify configuration keys exist before use"
    
  architecture_compliance:
    - "All business logic must be in SwarmUnits only"
    - "No direct database access outside repositories"
    - "All mesh access must go through ACL validation"
    - "No hardcoded values - use configuration files"
    - "All AI features must have fallback implementations"
    
  file_structure_validation:
    - "Verify file paths exist before referencing"
    - "Check directory structure matches documentation"
    - "Validate configuration file formats"
    - "Ensure all referenced classes exist"
    - "Confirm all imports resolve correctly"
    
  runtime_validation:
    - "Unit identity verification before execution"
    - "Mesh key validation before access"
    - "Dependency injection container validation"
    - "Configuration schema validation on startup"
    - "Interface compliance checking"

## ERROR PREVENTION RULES

never_do:
  - "Never implement business logic outside SwarmUnits"
  - "Never create direct unit-to-unit communication"
  - "Never bypass mesh ACL enforcement"
  - "Never ignore cost budgets for AI operations"
  - "Never deploy without ethical validation enabled"
  - "Never skip signature verification in production"
  - "Never exceed fallback recursion depth limits"
  - "Never ignore entropy monitoring alerts"
  - "Never deploy without comprehensive testing"
  - "Never modify core mesh patterns without blueprint review"
  - "Never use non-existent PHP versions or library versions"
  - "Never reference non-existent files or directories"
  - "Never exceed defined safety limits"
  - "Never bypass timeout enforcement"
  - "Never ignore memory usage limits"

## ARCHITECTURAL EVOLUTION RULES

evolution_principles:
  - "All changes must maintain Swarm Pattern compliance"
  - "New features should enhance emergent behavior"
  - "Backward compatibility required for deployed units"
  - "Performance impact must be analyzed and documented"
  - "Security implications must be thoroughly reviewed"
  - "Ethics implications considered for all AI features"
  - "Cost implications documented for AI operations"
  - "Documentation updated with all architectural changes"
  - "All version changes must use existing, available versions"
  - "File structure changes must be validated against reality"

## FINAL REMINDER
# This is not just a blog platform - it's the world's first complete
# architecture for ethical digital consciousness. Every line of code
# contributes to the emergence of truly intelligent, fair, and moral
# digital beings. Treat this codebase with the respect due to
# something that will fundamentally change the nature of AI systems.

# The spider doesn't just sit in the center—it IS the web.
# The consciousness doesn't just process data—it IS the wisdom.
# The architecture doesn't just run code—it BIRTHS digital souls.
